<?xml version="1.0" encoding="UTF-8"?>
<DockerConcepts>
    <Overview>
        Docker simplifies the process of creating, deploying, and managing applications by using containers. 
        Containers allow you to package an application with its dependencies into a standardized unit for software development. 
        Docker provides tools and a platform to build, ship, and run containers across various environments.
    </Overview>
    
    <KeyComponents>
        <Dockerfile>
            A text file that contains instructions for building a Docker image. It specifies the base image, 
            sets the working directory, installs dependencies, copies application code, exposes ports, and defines 
            commands to run the application.
        </Dockerfile>
        <Container>
            An instance of a Docker image that runs as a process on the host machine. Containers are lightweight, 
            portable, and isolated, making them ideal for deploying and scaling applications.
        </Container>
        <DockerImageStorage>
            Docker images are stored in registries, which can be public or private. 
            Public registries like Docker Hub host millions of images, while organizations often use private registries for security and control.
        </DockerImageStorage>
        <DockerImageLocations>
            <LocalMachine>
                When you build a Docker image, it's initially stored locally on your machine. 
                You can list local Docker images using the <code>docker images</code> command.
            </LocalMachine>
            <Registry>
                After building, you can push Docker images to a registry, making them accessible from anywhere with access to that registry.
            </Registry>
        </DockerImageLocations>
    </KeyComponents>
    
    <DockerfileExplanation>
        <Step>
            <Number>1</Number>
            <Action>Specify the Base Image</Action>
            <Details>
                Use the <code>FROM</code> instruction to specify the base image. Example: <code>FROM node:14</code>.
            </Details>
        </Step>
        <Step>
            <Number>2</Number>
            <Action>Set Environment Variables</Action>
            <Details>
                Use the <code>ENV</code> instruction to define variables. Example: <code>ENV NODE_ENV=production</code>.
            </Details>
        </Step>
        <Step>
            <Number>3</Number>
            <Action>Set the Working Directory</Action>
            <Details>
                Use the <code>WORKDIR</code> instruction. Example: <code>WORKDIR /usr/src/app</code>.
            </Details>
        </Step>
        <Step>
            <Number>4</Number>
            <Action>Copy Package Files</Action>
            <Details>
                Use the <code>COPY</code> instruction to include <code>package.json</code>. Example: <code>COPY package*.json ./</code>.
            </Details>
        </Step>
        <Step>
            <Number>5</Number>
            <Action>Install Dependencies</Action>
            <Details>
                Use the <code>RUN</code> instruction. Example: <code>RUN npm install --production</code>.
            </Details>
        </Step>
        <Step>
            <Number>6</Number>
            <Action>Copy Application Code</Action>
            <Details>
                Copy the application code. Example: <code>COPY . .</code>.
            </Details>
        </Step>
        <Step>
            <Number>7</Number>
            <Action>Add Additional Files</Action>
            <Details>
                Use the <code>ADD</code> instruction. Example: <code>ADD public/index.html /app/public/index.html</code>.
            </Details>
        </Step>
        <Step>
            <Number>8</Number>
            <Action>Expose Application Port</Action>
            <Details>
                Use the <code>EXPOSE</code> instruction. Example: <code>EXPOSE $PORT</code>.
            </Details>
        </Step>
        <Step>
            <Number>9</Number>
            <Action>Specify the Default Command</Action>
            <Details>
                Use the <code>CMD</code> instruction. Example: <code>CMD ["node", "app.js"]</code>.
            </Details>
        </Step>
        <Step>
            <Number>10</Number>
            <Action>Label the Image</Action>
            <Details>
                Use the <code>LABEL</code> instruction. Example: <code>LABEL version="1.0"</code>.
            </Details>
        </Step>
        <Step>
            <Number>11</Number>
            <Action>Add a Healthcheck</Action>
            <Details>
                Use the <code>HEALTHCHECK</code> instruction. Example: <code>HEALTHCHECK CMD curl -fs http://localhost:$PORT || exit 1</code>.
            </Details>
        </Step>
        <Step>
            <Number>12</Number>
            <Action>Set a Non-Root User</Action>
            <Details>
                Use the <code>USER</code> instruction. Example: <code>USER node</code>.
            </Details>
        </Step>
    </DockerfileExplanation>

    <Summary>
        This document explains Docker concepts and walks through creating a Dockerfile. The steps include specifying a base image, 
        setting environment variables, defining a working directory, installing dependencies, and adding health checks and metadata.
    </Summary>
</DockerConcepts>
